using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace apBiblioteca
{
  public partial class FrmLeitores : Form
  {
    VetorDados<Livro>  osLivros; // osLivros armazenará os dados lidos e terá os métodos de manutenção
    VetorDados<Leitor> osLeitores;
    int ondeIncluir = 0;        // global --> acessível na classe toda

    string nomeArquivoLeitores, nomeArquivoLivros;
    
    public FrmLeitores()
    {
      InitializeComponent();
    }

    private void FrmFunc_Load(object sender, EventArgs e)
    {
      int indice = 0;
      barraDeFerramentas.ImageList = imlBotoes;
      foreach (ToolStripItem item in barraDeFerramentas.Items)
        if (item is ToolStripButton) // se não é separador:
          (item as ToolStripButton).ImageIndex = indice++;

      osLeitores = new VetorDados<Leitor>(50); // instancia com vetor dados com 50 posições
      dlgAbrir.Title = "Selecione o arquivo com os dados de leitores";
      if (dlgAbrir.ShowDialog() == DialogResult.OK)
      {
        nomeArquivoLeitores = dlgAbrir.FileName;
        osLeitores.LerDados(nomeArquivoLeitores);
        btnInicio.PerformClick();
      }

      osLivros = new VetorDados<Livro>(50); // instancia com vetor dados com 50 posições
      dlgAbrir.Title = "Selecione o arquivo com os dados de livros";
      if (dlgAbrir.ShowDialog() == DialogResult.OK)
      {
        nomeArquivoLivros = dlgAbrir.FileName;
        osLivros.LerDados(nomeArquivoLivros);
      }
    }

    private void btnInicio_Click(object sender, EventArgs e)
    {
      osLeitores.PosicionarNoPrimeiro();
      AtualizarTela();
    }
    private void btnAnterior_Click(object sender, EventArgs e)
    {
      osLeitores.RetrocederPosicao();
      AtualizarTela();
    }
    private void btnProximo_Click(object sender, EventArgs e)
    {
      osLeitores.AvancarPosicao();
      AtualizarTela();
    }
    private void btnUltimo_Click(object sender, EventArgs e)
    {
      osLeitores.PosicionarNoUltimo();
      AtualizarTela();
    }

    private void AtualizarTela()
    {
      if (!osLeitores.EstaVazio)
      {
        int indice = osLeitores.PosicaoAtual;
        txtCodigoLeitor.Text = osLeitores[indice].CodigoLeitor + "";
        txtNomeLeitor.Text = osLeitores[indice].NomeLeitor;
        txtEndereco.Text = osLeitores[indice].EnderecoLeitor;

        dgvLivros.RowCount = osLeitores[indice].QuantosLivrosComLeitor; 

        for (int umLivro = 0; 
                 umLivro < osLeitores[indice].QuantosLivrosComLeitor;
                 umLivro++)
        {

        }

        TestarBotoes();
        stlbMensagem.Text =
          "Registro " + (osLivros.PosicaoAtual + 1) +
                     "/" + osLivros.Tamanho;
      }
    }
    private void LimparTela()
    {
      txtCodigoLeitor.Clear();
      txtNomeLeitor.Clear();
      foreach (Control botao in grbTipoLivro.Controls)
        if (botao is RadioButton)
           (botao as RadioButton).Checked = false;

      txtLeitorComLivro.Text = "000000";
      txtDataDevolucao.Text = "";
      txtNomeLeitor.Text = "";
    }

    private void TestarBotoes()
    {
      btnInicio.Enabled = true;
      btnAnterior.Enabled = true;
      btnProximo.Enabled = true;
      btnUltimo.Enabled = true;
      if (osLivros.EstaNoInicio)
      {
        btnInicio.Enabled = false;
        btnAnterior.Enabled = false;
      }
      if (osLivros.EstaNoFim)
      {
        btnProximo.Enabled = false;
        btnUltimo.Enabled = false;
      }
    }

    private void btnNovo_Click(object sender, EventArgs e)
    {
      // saímos do modo de navegação e entramos no modo de inclusão:
      osLivros.SituacaoAtual = Situacao.incluindo;

      // preparamos a tela para que seja possível digitar dados do novo livro
      LimparTela();

      // colocamos o cursor no campo chave
      txtCodigoLeitor.Focus();

      // Exibimos mensagem no statusStrip para instruir o usuário a digitar dados
      stlbMensagem.Text = "Digite o código do novo livro";

      btnSalvar.Enabled = true;
    }

    private void txtMatricula_Leave(object sender, EventArgs e)
    {
      if (txtCodigoLeitor.Text == "")
        MessageBox.Show("Digite um código válido!");
      else
      {
        var procurado = new Livro(txtCodigoLeitor.Text);
        switch (osLivros.SituacaoAtual)
        {
          case Situacao.incluindo:
            if (osLivros.Existe(procurado, ref ondeIncluir))   // se já existe o código
            {
              MessageBox.Show("Código repetido; inclusão cancelada.");
              osLivros.SituacaoAtual = Situacao.navegando;
              AtualizarTela(); // restaura o registro visível anteriormente
            }
            else // o código ainda não existe no vetor dados
            {
              txtNomeLeitor.Focus();
              stlbMensagem.Text = "Digite os demais dados. Após isso pressione [Salvar]";
            }
            break;
          case Situacao.pesquisando:
            int ondeAchou = 0;
            if (!osLivros.Existe(procurado, ref ondeAchou))
            {
              MessageBox.Show("Código não foi cadastrado ainda.");
              AtualizarTela();
              osLivros.SituacaoAtual = Situacao.navegando;
            }
            else  // encontrou o código procurado na posição ondeAchou
            {
              osLivros.PosicaoAtual = ondeAchou;
              AtualizarTela();
              osLivros.SituacaoAtual = Situacao.navegando;
            }
            break;
        }
      }
    }

    private void btnSalvar_Click(object sender, EventArgs e)
    {
      int qualTipo = -1, qualRadioButton = -1;
      for (int qualItem=0; qualItem < grbTipoLivro.Controls.Count;
               qualItem++)
        if (grbTipoLivro.Controls[qualItem] is RadioButton)
        {
          qualRadioButton++;
          if ((grbTipoLivro.Controls[qualItem] as RadioButton).Checked)
          {
            qualTipo = qualRadioButton;
            break;
          }
        }
        if (qualTipo == -1)
           MessageBox.Show("Selecione um tipo de livro antes de salvar o registro!");
        else
          if (osLivros.SituacaoAtual == Situacao.incluindo) // está no modo de inclusão
          {
            var novoDado = new Livro(txtCodigoLeitor.Text,
                                   txtNomeLeitor.Text, qualTipo,
                                   new DateTime(1899, 12, 31),
                                   "000000");
            osLivros.Incluir(novoDado, ondeIncluir);
            // para mudar o registro com o qual trabalhamos no momento
            osLivros.PosicaoAtual = ondeIncluir;
            AtualizarTela();
            osLivros.SituacaoAtual = Situacao.navegando; // termina o modo de inclusão
          }
          else  // verificar se está editando
            if (osLivros.SituacaoAtual == Situacao.editando)
            {
              osLivros[osLivros.PosicaoAtual] = new Livro(
                    txtCodigoLeitor.Text, txtNomeLeitor.Text,qualTipo,
                    osLivros[osLivros.PosicaoAtual].DataDevolucao,
                    osLivros[osLivros.PosicaoAtual].CodigoLeitorComLivro);
              osLivros.SituacaoAtual = Situacao.navegando;
              txtCodigoLeitor.ReadOnly = false;
              AtualizarTela();
            }
      btnSalvar.Enabled = false;
    }

    private void btnSair_Click(object sender, EventArgs e)
    {
      // fecha o formulário mas antes dispara o evento FormClosing
      Close();  
    }

    private void FrmFunc_FormClosing(object sender, FormClosingEventArgs e)
    {
      osLivros.GravarDados(nomeArquivoLivros);
    }

    private void btnExcluir_Click(object sender, EventArgs e)
    {
      if (MessageBox.Show(
             "Deseja realmente excluir?", "Exclusão",
             MessageBoxButtons.YesNo, 
             MessageBoxIcon.Warning) == DialogResult.Yes)
      {
        osLivros.Excluir(osLivros.PosicaoAtual);
        if (osLivros.PosicaoAtual >= osLivros.Tamanho)
           osLivros.PosicionarNoUltimo();
        AtualizarTela();
      }
    }

    private void btnProcurar_Click(object sender, EventArgs e)
    {
      LimparTela();
      osLivros.SituacaoAtual = Situacao.pesquisando;
      txtCodigoLeitor.Focus();
      stlbMensagem.Text = "Digite o código do livro que busca";
    }

    private void tpLista_Enter(object sender, EventArgs e)
    {
      osLivros.ExibirDados(lsbLivros, "Código  Título");
    }

    private void btnEditar_Click(object sender, EventArgs e)
    {
      osLivros.SituacaoAtual = Situacao.editando;
      txtCodigoLeitor.ReadOnly = true;  // para não permitir alterar a matrícula
      stlbMensagem.Text = "Modifique os campos desejados e pressione [Salvar]";
      txtNomeLeitor.Focus();

      btnSalvar.Enabled = true;
    }

    private void btnCancelar_Click(object sender, EventArgs e)
    {
      osLivros.SituacaoAtual = Situacao.navegando;
      AtualizarTela();
      btnSalvar.Enabled = false;
    }
  }
}

 